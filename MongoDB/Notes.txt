MongoDB is a document Database.
MongoDB is a non-relational non-tabular Database.
Relational data is stored differently.
Instead of having  multiple tables all the related data are stored together.
In MongoDB tables are called collections.
MongoDB can be installed locally(for client software MongoDB Compass or Mongosh Shell) or in cloud called MongoDB Atlas.
Mongosh or Compass can be used to query MongoDB.
MongoDB is a NoSQL Database.

go to cmd and write:
    mongosh
to download:
Compass:    https://www.mongodb.com/try/download/community
Shell:      https://www.mongodb.com/try/download/shell

Shell is a CLI.
Compass is GUI.
Both Connect with same database.
 ________________________      ___________________
|        Database        |    |      Client       |
|    local 127.0.0.1     |    |  MongoDB Compass  |
|    cloud Atlas         |    |   MongoDB Shell   |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

~> Got to Services fron start menu if there's a mongoDB service running means MongoDB is running in device.

~> Using MongoDB Shell we connect to "local" MongoDB Server.

~> Inside Mongosh Shell it treats //statements as comments

~> Question: Pros and Cons of Indexing  =>
    (Pros)
    Faster Data Retrieval:
        Speeds up SELECT queries by reducing the amount of data the database needs to scan.
    Improved Search Performance:
        Helps quickly locate records with WHERE, JOIN, ORDER BY, and GROUP BY clauses.
    Efficient Sorting:
        Indexes can make sorting operations faster since data is often stored in an ordered manner (e.g., B-Trees).
    Unique Constraints:
        Indexes can enforce uniqueness on columns like email or username.
    Better Performance for Joins:
        Speeds up joins between large tables if join columns are indexed.
    (Cons)
    Increased Storage Space:
        Indexes consume disk space. More indexes = more storage.
    Slower Write Operations (INSERT, UPDATE, DELETE):
        Every time data is modified, related indexes must also be updated, which slows down write performance.
    Maintenance Overhead:
        Indexes need to be maintained as data changes. This adds overhead, especially for frequently updated tables.
    Complexity:
        Poorly chosen indexes can degrade performance instead of improving it. Choosing what to index requires careful planning.
    Not Always Used:
        If queries don’t use the indexed column(s) effectively, the index may be ignored, making it useless.

~> Quesiton: Default index in MongoDB => "_id" field

~> Collection Name is address

~> MongoDB runs on default port: localhost:27017

~> Aggregation and Aggregation vs find

~> Backup for MongoDB:
https://www.mongodb.com/try/download/database-tools

after download and installation, set enviroment variable path for it's bin folder
"C:\Program Files\MongoDB\Tools\100\bin"

mongodump -d deatabaseName -o path

-d:for database paramenter name
-o: output whenere we  have to dump the backup

to restore:
mongorestore -d databaseName "path_of_backup"

~> Improved Alternative for backup: ( Replica Set )
    Backup takes too much time having a huge downtime for large databases.
    There's a data folder inside server folder of mongodb, containing all the data.
    These databases are the replicas and the set of all these data base serveres collectively are called replica Set
    Replica Set:
     ________________________      ___________________       ____________________
    |       Database A       |    |     Database B    |     |     Database C     |
    |       A-Secondary      |    |     B-Primary     |     |     C-Secondary    |
    |        Server A        |    |      Server B     |     |      Server C      |
    |         [Data]         |    |       [Data]      |     |       [Data]       |
     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    If server B is down it'll automatically make A or C as primary server.
    If server B gets up again it remains secondary until currect primary server is down.
    If all servers get down then we have backup.
    We do the write (and other) operations in primary server and let secondary servers to pull data(replica). for load balancing.
    If databse is too big we can manually do read operations in other replica server for load balancing.
    All the operations get written by mongoDB internally (not manually) from replica sets.

    - Steps to create an enviroment withing local device:
        1> Create a folder mongo-replica and subfolders data1 data2 data3
            data1, data2, data3 will act like different servers.
        2> Open command prompt and start running servers on separate tabs
            running different servers parallely.
        2.1> Add Enviroment Variable Path (if commands are not recognized)
            Set path of bin folder inside server folder in enviroment Variable.
            "C:\Program Files\MongoDB\Server\7.0\bin"
        3>To start mongoDB servers in different ports manually
            command:
                mongod -replSet rs1 -logpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data1\1.log" --dbpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data1" --port 27018
                mongod -replSet rs1 -logpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data2\2.log" --dbpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data2" --port 27019
                mongod -replSet rs1 -logpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data3\3.log" --dbpath "E:\Programs\MERN\PR2309.github.io\MongoDB\mongo-replica\data3" --port 27020

/*
                mongod -replSet rs1 -logpath "mongo-replica\data1\log1.lo"--dbpath "
                rs1 : name of replica set 
                        it shall be same for all servers to work together.
                1.log stores log of first server
                data1 stores the data.
*/
        4> Configure the replica Set
            As all 3 servers are running but we don't have primariy or secondary.
            We need to loging and initiate replicaSet to make one primary.
            Open new cmd tab and login one of theses server (first one here).
            command:
                mongosh --port 27018
        5> Initiate replicaSet.
            command:
                rs.initiate({
                    _id:"rs1", members:[{
                        _id:0,
                        host:"127.0.0.1:27018"
                    },{
                        _id:1,
                        host:"127.0.0.1:27019"
                    },{
                        _id:2,
                        host:"127.0.0.1:27020"    
                    }]
                })
            In real life port 27018 is IP of the server.
        6> rs.config() // to check the config, to view the current replica set configuration of a node.
        7> rs.status() // to check which is primary server
        8> Now connect using full path to the desired server
            mongosh mongodb://localhost:27018,localhost:27019,localhost:27020/?replicaSet=rs1
        9> after creating collections and adding data to it check other server by connecting it in new tabs
            mongosh --port 27019
            mongosh --port 27020

        
        10> db.getMongo().setReadPref("secondary") //to make it read from secondary server
        11> to hide a replicaSet:
                let config = rs.conf();
                config.members[1].hidden = true;
                rs.reconfig(config);


~> Transections Implementations due to Transitions:
    We use replica Sets to implement transections by replication first. 

~> Sharding:
    Distributes data into all servers,in a horizontal scaling.
